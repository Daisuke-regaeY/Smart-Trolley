#include <SPI.h>
#include <MFRC522.h>
#include <LiquidCrystal.h> // Include the LiquidCrystal library

#define SS_PIN 10      // SS pin for MFRC522 RFID reader
#define RST_PIN 5      // RST pin for MFRC522 RFID reader
#define BUTTON_PIN 2   // Pin for the push button
#define BUZZER_PIN 4   // Pin for the buzzer

// Define LCD pin connections
#define LCD_RS 8
#define LCD_EN 9
#define LCD_D4 11
#define LCD_D5 12
#define LCD_D6 13
#define LCD_D7 14
#define LCD_COLUMNS 16
#define LCD_ROWS 2

LiquidCrystal lcd(LCD_RS, LCD_EN, LCD_D4, LCD_D5, LCD_D6, LCD_D7); // Initialize the LCD

MFRC522 mfrc522(SS_PIN, RST_PIN);

// Define product details
struct Product {
  String name;
  float price;
};

Product products[] = {
  {"Biscuit", 10.00},
  {"Tea", 20.00},
  {"Coffee", 30.00},
  {"Ice Cream", 40.00}
};

// Define array to map RFID UIDs to products
String productUIDs[] = {
  "cdbc1c3a",
  "8666b206",
  "1d91f306",
  "1d91f339"
};

float totalAmount = 0.0;
int productsAdded = 1;
bool buttonPressed = false;

// Motor control pins
#define ENA 3
#define IN1 22
#define IN2 23
#define ENB 6
#define IN3 24
#define IN4 25

// Joystick pins
#define VRX_PIN A0
#define VRY_PIN A1

void setup() {
  Serial.begin(9600);
  SPI.begin();
  mfrc522.PCD_Init();
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  pinMode(BUZZER_PIN, OUTPUT);

  // Initialize the LCD
  lcd.begin(LCD_COLUMNS, LCD_ROWS);

  // Initialize motor control pins
  pinMode(ENA, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(ENB, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
}

void loop() {
  // Check for button press
  if (digitalRead(BUTTON_PIN) == LOW) {
    buttonPressed = !buttonPressed; // Toggle button state
    if (buttonPressed) {
      displayBillAmount(); // Print total amount when button is pressed
      totalAmount = 0.0; // Reset total amount
      productsAdded = 1; // Reset total product count
    }
    delay(250); // Debounce delay
  }

  // Read RFID card if button is not pressed
  if (!buttonPressed && mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
    String tagUID = "";
    for (byte i = 0; i < mfrc522.uid.size; i++) {
      tagUID += (mfrc522.uid.uidByte[i] < 0x10 ? "0" : "");
      tagUID += String(mfrc522.uid.uidByte[i], HEX);
    }
    mfrc522.PICC_HaltA();
    
    // Beep the buzzer
    beep();

    // Search for product details based on RFID tag UID
    int productIndex = -1;
    for (int i = 0; i < sizeof(productUIDs) / sizeof(productUIDs[0]); i++) {
      if (tagUID == productUIDs[i]) {
        productIndex = i;
        break;
      }
    }
    
    // If product found, add to the total amount and display
    if (productIndex != -1) {
      totalAmount += products[productIndex].price;
      displayProductDetails(productIndex);
      productsAdded++;
    } else {
      Serial.println("Product not found");
    }
  }

  // Control motors based on joystick input
  controlMotors();
}

// Function to control the buzzer
void beep() {
  digitalWrite(BUZZER_PIN, HIGH); // Turn on the buzzer
  delay(100); // Beep duration
  digitalWrite(BUZZER_PIN, LOW); // Turn off the buzzer
}

// Function to display product details on LCD
void displayProductDetails(int index) {
  lcd.clear(); // Clear the LCD
  lcd.setCursor(0, 0);
  lcd.print("Product: ");
  lcd.print(products[index].name);
  lcd.setCursor(0, 1);
  lcd.print("Price: Rs");
  lcd.print(products[index].price);
}

// Function to display bill amount on LCD
void displayBillAmount() {
  lcd.clear(); // Clear the LCD
  lcd.setCursor(0, 0);
  lcd.print("Total Amount: Rs");
  lcd.print(totalAmount);
  lcd.setCursor(0, 1);
  lcd.print("Total Products: ");
  lcd.print(productsAdded - 1);
}

// Function to control motors based on joystick input
void controlMotors() {
  int xValue = analogRead(VRX_PIN);
  int yValue = analogRead(VRY_PIN);

  int motorSpeedA = map(abs(yValue - 512), 0, 512, 0, 255);
  int motorSpeedB = map(abs(xValue - 512), 0, 512, 0, 255);
  if (yValue < 512) { // Forward
      digitalWrite(IN1, HIGH);
      digitalWrite(IN2, LOW);
      analogWrite(ENA, motorSpeedA);
  } else if (yValue > 512) { // Backward
      digitalWrite(IN1, LOW);
      digitalWrite(IN2, HIGH);
      analogWrite(ENA, motorSpeedA);
  } else {
      analogWrite(ENA, 0);
  }

  if (xValue < 512) { // Left
      digitalWrite(IN3, HIGH);
      digitalWrite(IN4, LOW);
      analogWrite(ENB, motorSpeedB);
  } else if (xValue > 512) { // Right
      digitalWrite(IN3, LOW);
      digitalWrite(IN4, HIGH);
      analogWrite(ENB, motorSpeedB);
  } else {
      analogWrite(ENB, 0);
}
}
